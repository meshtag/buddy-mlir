#map0 = affine_map<(d0) -> (d0)>
module {
  func private @print_memref_f32(memref<*xf32>)

  func @alloc_2d_filled_f32(%arg0: index, %arg1: index, %arg2: f32) -> memref<?x?xf32> {
    %c0 = constant 0 : index
    %c1 = constant 1 : index
    %0 = memref.alloc(%arg0, %arg1) : memref<?x?xf32>
    scf.for %arg3 = %c0 to %arg0 step %c1 {
      scf.for %arg4 = %c0 to %arg1 step %c1 {
        memref.store %arg2, %0[%arg3, %arg4] : memref<?x?xf32>
      }
    }
    return %0 : memref<?x?xf32>
  }

  func @main() {
    %cst = constant 2.000000e+00 : f32
    %cst_k = constant 1.000000e+00 : f32

    %kernel_size = constant 3 : index
    %c0 = constant 0 : index
    %c1 = constant 1 : index
    %image_size = constant 6 : index

    %center_y = constant 1 : index
    %center_x = constant 1 : index

    %image = call @alloc_2d_filled_f32(%image_size, %image_size, %cst) : (index, index, f32) -> memref<?x?xf32>
    %kernel = call @alloc_2d_filled_f32(%kernel_size, %kernel_size, %cst_k) : (index, index, f32) -> memref<?x?xf32>

    %print_output = memref.cast %image : memref<?x?xf32> to memref<*xf32>
    call @print_memref_f32(%print_output) : (memref<*xf32>) -> ()

    %print_kernel = memref.cast %kernel : memref<?x?xf32> to memref<*xf32>
    call @print_memref_f32(%print_kernel) : (memref<*xf32>) -> ()

    %pseudo_size_helper = subi %kernel_size, %c1 : index
    %pseudo_image_size = addi %image_size, %pseudo_size_helper : index
    %last_pseudo_elem = subi %pseudo_image_size, %pseudo_size_helper : index
    %stride = constant 3 : index

    affine.for %ivs0 = %c0 to %last_pseudo_elem {
      affine.for %ivs1 = %c0 to %kernel_size {
        affine.for %ivs2 = %c0 to %kernel_size {
          affine.for %iv = %c0 to %last_pseudo_elem {

            %curr_row = addi %ivs0, %ivs1 : index
            %curr_psedu_col = floordivi_signed %ivs2, %stride : index
            %curr_col = muli %curr_psedu_col, %stride : index
            %pos = cmpi slt, %curr_row, %center_y : index
            
            scf.if %pos {

            } else {
              
            }

          }
        }
      }
    }

    memref.dealloc %image : memref<?x?xf32>
    return
  }
}
