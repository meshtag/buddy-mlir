module {
  func private @print_memref_f32(memref<*xf32>)
  func private @rtclock() -> f64

  func @alloc_2d_filled_f32(%arg0: index, %arg1: index, %arg2: f32) -> memref<?x?xf32> {
    %c0 = constant 0 : index
    %c1 = constant 1 : index
    %0 = memref.alloc(%arg0, %arg1) : memref<?x?xf32>
    scf.for %arg3 = %c0 to %arg0 step %c1 {
      scf.for %arg4 = %c0 to %arg1 step %c1 {
        memref.store %arg2, %0[%arg3, %arg4] : memref<?x?xf32>
      }
    }
    return %0 : memref<?x?xf32>
  }

  func @main() {
    %cst = constant 4.000000e+00 : f32
    %cst_k = constant 1.000000e+00 : f32
    %cst_o = constant 0.000000e+00 : f32

    %kernel_size = constant 5 : index
    %c0 = constant 0 : index
    %c1 = constant 1 : index

    %image_height = constant 13 : index
    %image_width = constant 10 : index
    %center_y = constant 2 : index
    %center_x = constant 2 : index
    %constant_padding = constant 0.0 : f32
    %stride = constant 5 : index

    %image = call @alloc_2d_filled_f32(%image_height, %image_width, %cst)
               : (index, index, f32) -> memref<?x?xf32>
    %kernel = call @alloc_2d_filled_f32(%kernel_size, %kernel_size, %cst_k)
               : (index, index, f32) -> memref<?x?xf32>
    %output = call @alloc_2d_filled_f32(%image_height, %image_width, %cst_o)
               : (index, index, f32) -> memref<?x?xf32>

    %print_output = memref.cast %image : memref<?x?xf32> to memref<*xf32>
    call @print_memref_f32(%print_output) : (memref<*xf32>) -> ()

    %print_kernel = memref.cast %kernel : memref<?x?xf32> to memref<*xf32>
    call @print_memref_f32(%print_kernel) : (memref<*xf32>) -> ()

    %pseudo_kernel_size_helper = subi %kernel_size, %c1 : index

    %pseudo_image_height = addi %image_height, %pseudo_kernel_size_helper : index
    %pseudo_image_width = addi %image_width, %pseudo_kernel_size_helper : index

    // Execution times.
    %reps = constant 200 : index

    // Record start time.
    %t_start = call @rtclock() : () -> f64

    // affine.for %rep = 0 to %reps {
    affine.for %ivs0 = %c0 to %image_height {
      affine.for %ivs1 = %c0 to %kernel_size {
        affine.for %iv = %c0 to %image_width step 5 {
          affine.for %iv_v = %c0 to %kernel_size {

            %curr_row = addi %ivs0, %ivs1 : index
            %curr_col = addi %iv, %iv_v : index

            %kernel_val = memref.load %kernel[%ivs1, %iv_v] : memref<?x?xf32>
            %kernel_vec = vector.broadcast %kernel_val : f32 to vector<5xf32>

            %im_row = subi %curr_row, %center_y : index
            %im_col = subi %curr_col, %center_x : index

            // Flag to determine whether we are in vertically upper region of 2D input data.
            %pos_row_up = cmpi slt, %curr_row, %center_y : index
            
            %pos_row_mid_flag = subi %pseudo_kernel_size_helper, %center_y : index
            %pos_row_mid_helper = subi %pseudo_image_height, %pos_row_mid_flag : index
            
            // Flag to determine whether we are in vertically middle region of 2D input data.
            %pos_row_mid = cmpi slt, %curr_row, %pos_row_mid_helper : index

            // Flag to determine whether we are in horizontally left region of 2D input data.
            %pos_col_left = cmpi slt, %curr_col, %center_x : index

            %pos_col_helper = addi %curr_col, %stride : index
            %pos_col_mid_flag_helper = subi %pseudo_kernel_size_helper, %center_x : index
            %pos_col_mid_helper = subi %pseudo_image_width, %pos_col_mid_flag_helper : index

            // Flag to determine whether we are in horizontally middle region of 2D input data.
            %pos_col_mid = cmpi sle, %pos_col_helper, %pos_col_mid_helper : index

            // No Comparison required for lower region and right region.

            scf.if %pos_row_up {
              scf.if %pos_col_left {

                %ref_row = subi %center_y, %curr_row : index

                // Assume stride is greater than center_x
                %left_mask_helper_elem = subi %center_x, %curr_col : index
                %left_mask_helper = vector.create_mask %left_mask_helper_elem : vector<5xi1>
                %c11 = constant 1 : i1
                %mask_inverter = vector.broadcast %c11 : i1 to vector<5xi1>
                %left_mask = subi %mask_inverter, %left_mask_helper : vector<5xi1>

                %c11_f32 = constant 1.0 : f32
                %inverter_f32 = vector.broadcast %c11_f32 : f32 to vector<5xf32>
                %im_data = vector.load %image[%ref_row, %c0] : memref<?x?xf32>, vector<5xf32>
                %padding_vec = vector.shuffle %im_data, %inverter_f32[4, 3, 2, 1, 0] :
                               vector<5xf32>, vector<5xf32>

                %input_vec = vector.maskedload %image[%ref_row, %c0], %left_mask, %padding_vec
                            : memref<?x?xf32>, vector<5xi1>, vector<5xf32> into vector<5xf32>

                %res_vec = vector.load %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>
                %out_vec = vector.fma %kernel_vec, %input_vec, %res_vec : vector<5xf32>
                vector.store %out_vec, %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>

              } else {
                scf.if %pos_col_mid {

                  %ref_row = subi %center_y, %curr_row : index
                  %input_vec = vector.load %image[%ref_row, %curr_col] : memref<?x?xf32>, vector<5xf32>

                  %res_vec = vector.load %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>
                  %out_vec = vector.fma %kernel_vec, %input_vec, %res_vec : vector<5xf32>
                  vector.store %out_vec, %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>

                } else {

                  %ref_row = subi %center_y, %curr_row : index
                  %load_index = subi %image_width, %stride : index

                  // Assume stride is greater than kernel_width - center_y - 1
                  %right_mask_helper_elem = subi %pos_col_helper, %pos_col_mid_helper : index
                  %right_mask_elem = subi %stride, %right_mask_helper_elem : index
                  %right_mask = vector.create_mask %right_mask_elem : vector<5xi1>

                  %c11_f32 = constant 1.0 : f32
                  %inverter_f32 = vector.broadcast %c11_f32 : f32 to vector<5xf32>
                  %im_data = vector.load %image[%ref_row, %load_index] : memref<?x?xf32>, vector<5xf32>
                  %padding_vec = vector.shuffle %im_data, %inverter_f32[4, 3, 2, 1, 0] :
                                 vector<5xf32>, vector<5xf32>

                  %input_vec = vector.maskedload %image[%ref_row, %im_col], %right_mask, %padding_vec
                             : memref<?x?xf32>, vector<5xi1>, vector<5xf32> into vector<5xf32>

                  %res_vec = vector.load %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>
                  %out_vec = vector.fma %kernel_vec, %input_vec, %res_vec : vector<5xf32>
                  vector.store %out_vec, %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>

                }
              }

            } else {
              scf.if %pos_row_mid {
                scf.if %pos_col_left {

                  // Assume stride is greater than center_x
                  %left_mask_helper_elem = subi %center_x, %curr_col : index
                  %left_mask_helper = vector.create_mask %left_mask_helper_elem : vector<5xi1>
                  %c11 = constant 1 : i1
                  %mask_inverter = vector.broadcast %c11 : i1 to vector<5xi1>
                  %left_mask = subi %mask_inverter, %left_mask_helper : vector<5xi1>

                  %c11_f32 = constant 1.0 : f32
                  %inverter_f32 = vector.broadcast %c11_f32 : f32 to vector<5xf32>
                  %im_data = vector.load %image[%im_row, %c0] : memref<?x?xf32>, vector<5xf32>
                  %padding_vec = vector.shuffle %im_data, %inverter_f32[4, 3, 2, 1, 0] : 
                                 vector<5xf32>, vector<5xf32>

                  %input_vec = vector.maskedload %image[%im_row, %c0], %left_mask, %padding_vec
                             : memref<?x?xf32>, vector<5xi1>, vector<5xf32> into vector<5xf32>

                  %res_vec = vector.load %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>
                  %out_vec = vector.fma %kernel_vec, %input_vec, %res_vec : vector<5xf32>
                  vector.store %out_vec, %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>

                } else {
                  scf.if %pos_col_mid {

                  %input_vec = vector.load %image[%im_row, %im_col] : memref<?x?xf32>, vector<5xf32>

                  %res_vec = vector.load %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>
                  %out_vec = vector.fma %kernel_vec, %input_vec, %res_vec : vector<5xf32>
                  vector.store %out_vec, %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>

                  } else {

                    // Assume stride is greater than kernel_width - center_y - 1
                    %right_mask_helper_elem = subi %pos_col_helper, %pos_col_mid_helper : index
                    %right_mask_elem = subi %stride, %right_mask_helper_elem : index
                    %right_mask = vector.create_mask %right_mask_elem : vector<5xi1>

                    %load_index = subi %image_width, %stride : index
                    %im_data = vector.load %image[%im_row, %load_index] : 
                               memref<?x?xf32>, vector<5xf32>
                    %c11_f32 = constant 1.0 : f32
                    %inverter_f32 = vector.broadcast %c11_f32 : f32 to vector<5xf32>
                    %padding_vec = vector.shuffle %im_data, %inverter_f32[4, 3, 2, 1, 0] : 
                                   vector<5xf32>, vector<5xf32>

                    %input_vec = vector.maskedload %image[%im_row, %im_col], %right_mask, 
                        %padding_vec : memref<?x?xf32>, vector<5xi1>, vector<5xf32> into vector<5xf32>

                    %res_vec = vector.load %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>
                    %out_vec = vector.fma %kernel_vec, %input_vec, %res_vec : vector<5xf32>
                    vector.store %out_vec, %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>

                  }
                }
              } else {
               
                scf.if %pos_col_left {

                  %ref_row_helper = subi %curr_row ,%pos_row_mid_helper : index
                  %ref_row_1_ahead = subi %image_height, %ref_row_helper : index
                  %ref_row = subi %ref_row_1_ahead, %c1 : index

                  // Assume stride is greater than center_x
                  %left_mask_helper_elem = subi %center_x, %curr_col : index
                  %left_mask_helper = vector.create_mask %left_mask_helper_elem : vector<5xi1>
                  %c11 = constant 1 : i1
                  %mask_inverter = vector.broadcast %c11 : i1 to vector<5xi1>
                  %left_mask = subi %mask_inverter, %left_mask_helper : vector<5xi1>

                  %c11_f32 = constant 1.0 : f32
                  %inverter_f32 = vector.broadcast %c11_f32 : f32 to vector<5xf32>
                  %im_data = vector.load %image[%ref_row, %c0] : memref<?x?xf32>, vector<5xf32>
                  %padding_vec = vector.shuffle %im_data, %inverter_f32[4, 3, 2, 1, 0] :
                                 vector<5xf32>, vector<5xf32>

                  %input_vec = vector.maskedload %image[%ref_row, %c0], %left_mask, %padding_vec
                              : memref<?x?xf32>, vector<5xi1>, vector<5xf32> into vector<5xf32>

                  %res_vec = vector.load %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>
                  %out_vec = vector.fma %kernel_vec, %input_vec, %res_vec : vector<5xf32>
                  vector.store %out_vec, %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>

                } else {
                  scf.if %pos_col_mid {

                    %ref_row_helper = subi %curr_row ,%pos_row_mid_helper : index
                    %ref_row_1_ahead = subi %image_height, %ref_row_helper : index
                    %ref_row = subi %ref_row_1_ahead, %c1 : index
                    
                    %input_vec = vector.load %image[%ref_row, %im_col] : memref<?x?xf32>, vector<5xf32>

                    %res_vec = vector.load %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>
                    %out_vec = vector.fma %kernel_vec, %input_vec, %res_vec : vector<5xf32>
                    vector.store %out_vec, %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>

                  } else {

                    %ref_row_helper = subi %curr_row ,%pos_row_mid_helper : index
                    %ref_row_1_ahead = subi %image_height, %ref_row_helper : index
                    %ref_row = subi %ref_row_1_ahead, %c1 : index
                    %load_index = subi %image_width, %stride : index

                    // Assume stride is greater than kernel_width - center_y - 1
                    %right_mask_helper_elem = subi %pos_col_helper, %pos_col_mid_helper : index
                    %right_mask_elem = subi %stride, %right_mask_helper_elem : index
                    %right_mask = vector.create_mask %right_mask_elem : vector<5xi1>

                    %c11_f32 = constant 1.0 : f32
                    %inverter_f32 = vector.broadcast %c11_f32 : f32 to vector<5xf32>
                    %im_data = vector.load %image[%ref_row, %load_index] : memref<?x?xf32>, vector<5xf32>
                    %padding_vec = vector.shuffle %im_data, %inverter_f32[4, 3, 2, 1, 0] :
                                   vector<5xf32>, vector<5xf32>

                    %input_vec = vector.maskedload %image[%ref_row, %im_col], %right_mask, %padding_vec
                               : memref<?x?xf32>, vector<5xi1>, vector<5xf32> into vector<5xf32>

                    %res_vec = vector.load %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>
                    %out_vec = vector.fma %kernel_vec, %input_vec, %res_vec : vector<5xf32>
                    vector.store %out_vec, %output[%ivs0, %iv] : memref<?x?xf32>, vector<5xf32>

                  }
                }

              }
            }
          }
        }
      }
    }
    // }

    // Record end time.
    %t_end = call @rtclock() : () -> f64

    // Get the total running time.
    %t = subf %t_end, %t_start : f64

    // vector.print %t : f64

    %print_output_image = memref.cast %output : memref<?x?xf32> to memref<*xf32>
    call @print_memref_f32(%print_output_image) : (memref<*xf32>) -> ()

    memref.dealloc %image : memref<?x?xf32>
    memref.dealloc %kernel : memref<?x?xf32>
    memref.dealloc %output : memref<?x?xf32>
    return
  }
}
