name : Install Buddy-mlir

on:
  pull_request:
  push:
    branches:
      - main
      - GitHubActions # For debugging 

jobs:
  installBuddy-mlir: 
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Check LLVM cache
      id: cache-llvm
      uses: actions/cache@v2
      with:
        path: llvm
        key: ${{ runner.os }}-mlir

    - name: Build LLVM
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      run: |
        ls
        mkdir llvm/build
        cd llvm/build
        cmake -G Ninja ../llvm -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_TARGETS_TO_BUILD="host" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON
        cmake --build . --target check-mlir 
        ninja 
        ninja check-mlir

    - name: Check OpenCV cache
      id: cache-opencv
      uses: actions/cache@v2
      with:
        path: llvm
        key: ${{ runner.os }}-python3-opencv

    - name: Install OpenCV
      if: steps.cache-opencv.outputs.cache-hit != 'true'
      run: |
        sudo apt update
        sudo apt install python3-opencv

    - name: Check Ninja cache
      id: cache-ninja
      uses: actions/cache@v2
      with:
        path: llvm
        key: ${{ runner.os }}-ninja-build

    - name: Install OpenCV
      if: steps.cache-ninja.outputs.cache-hit != 'true'
      run: |
        sudo apt update
        sudo apt-get install ninja-build 

    - name: Build buddy-mlir examples
      run: |
        mkdir build 
        cd build
        cmake -G Ninja .. -DMLIR_DIR=$PWD/../llvm/build/lib/cmake/mlir -DLLVM_DIR=$PWD/../llvm/build/lib/cmake/llvm -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=RELEASE
        ninja
        cmake -G Ninja .. -DBUDDY_EXAMPLES=ON -DBUDDY_CONV_OPT_STRIP_MINING=256 
        ninja edge-detection
        ninja correlation2D
        ./edge-detection ../../examples/ConvOpt/images/YuTu.png result.png
        ./correlation2D ../../examples/ConvOpt/images/YuTu.png result-dip.png
